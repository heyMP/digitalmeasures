<?php

define('DIGITALMEASURES_BASE_URL', 'https://beta.digitalmeasures.com');

/**
 * Implements hook_menu().
 */
function digitalmeasures_menu() {
  $items['admin/config/services/digitalmeasures'] = array(
    'title' => 'Digital Measures Configuration',
    'access arguments' => array('admininster digital measures'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('digitalmeasures_admin_config_form'),
    'file' => 'digitalmeasures.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function digitalmeasures_permission() {
  return array(
    'administer digital measures' =>  array(
      'title' => t('Administer Digital Measures'),
      'description' => t('Perform administration tasks for the Digital Measures module.'),
    ),
  );
}

/**
 * Public function to retrieve user profile information from Digital Measures.
 *
 * $arguments    An array of index keys to search on where the key of array is
 *               the 'indexKey' and the value is the 'entryKey' that you want
 *               to search on.
 *               Example: array(
 *                          'USERNAME' => 'mgp140',
 *                          'CAMPUS' => 'University Park'
 *                        );
 * $output       Choose how your reponse data is rendered. Supports 'php' or 'xml'.
 */
function digitalmeasures_digitalmeasures_get_schemadata($arguments = array(), $output = 'php') {
  $resource_id = 'login/service/v4/SchemaData/INDIVIDUAL-ACTIVITIES-University';
  $response = _digitalmeasures_connect($resource_id, $arguments);

  return _digital_measures_render_response_data($response, $output);
}

/**
 * Public function to retrieve a list of all indexes and entries.
 */
function digitalmeasures_digitalmeasures_get_all_indexes($output = 'php') {
  $resource_id = 'login/service/v4/SchemaIndex/INDIVIDUAL-ACTIVITIES-University';
  $response = _digitalmeasures_connect($resource_id, $arguments);

  return _digital_measures_render_response_data($response, $output);
}

/**
 * Helper function for connecting to Digital Measures via the drupal_http_request().
 * $arguments:    An array of options that are keyed by optional SchemaKey and
 *                whos nested array is a list of IndexKeyEntryKeys.
 * $resource_id:  The resource endpoint in Digital Measures.
 * $options:      Options peramter from for the drupal_http_request().
 */
function _digitalmeasures_connect($resource_id = '', $arguments = array(), $options = NULL) {
  $base_url = variable_get('digitalmeasures_url', '');
  $username = variable_get('digitalmeasures_username', '');
  $password = variable_get('digitalmeasures_password', '');
  $arguments = _digitalmeasures_argument_array_to_string($arguments);

  // Encode the username and password and set it in the header.
  $username_password = $username . ':' . $password;
  $options['headers']['Authorization'] = 'Basic ' . base64_encode($username_password);

  // Add the correct base_url
  $url = $base_url . '/' . $resource_id . '/' . $arguments;

  // Attempt to connect to Digital Measures
  if ($base_url && $username && $password) {
    return drupal_http_request($url, $options);
  }
  else {
    watchdog('digitalmeasures', 'Digital Measures is attempting to connect
      without the proper credentials. Please enter them on the Digital Measures
      configuration page.', array(), WATCHDOG_ERROR);
    return 'fail';
  }
}

/**
 * Helper function to convert an argument array to a comma spearated string.
 */
function _digitalmeasures_argument_array_to_string($arguments) {
  // Add the IndexEntryKey in front of the IndexKeyEntryKey in the array
  $arguments_string = '';
  foreach ($arguments as $index_entry_key => $argument_array) {
    foreach ($argument_array as $key => $index_key_entry_key) {
      $arguments_string .= $index_entry_key . ':' . $index_key_entry_key . ',';
    }
  }
  // Remove trailing comma
  $arguments_string = rtrim($arguments_string, ",");
  // Replace spaces with '+'
  $arguments_string = preg_replace('/ /', '+', $arguments_string);

  return $arguments_string;
}

/**
 * Helper function to handle how the request data is rendered
 */
function _digital_measures_render_response_data($response, $output) {
  // If php is selected then convert the request from xml object to php array.
  if ($output == 'php') {
    $response = _digitalmeasures_xml_to_array($response->data);
  }

  drush_print_r($response);
  if (module_exists('devel_debug_log')) {
    ddl($response);
  }
  return $response;
}

/**
 * Helper function to convert an xml string to php array.
 */
function _digitalmeasures_xml_to_array($xml_string) {
  $xml = simplexml_load_string($xml_string);
  $json = drupal_json_encode($xml);
  $array = drupal_json_decode($json);

  return $array;
}

/**
 * Helper function to convert a string of arguments into a nested array.
 *
 * $arguments_string  A comma separated list of indexkeys and entry keys,
 *                    separated by a colon.
 *                    Example:
 *                    USERNAME:mgp140,USERNAME:kpf107,CAMPUS_NAME=Berks
 *
 * @return array(
 *           USERNAME => array('mgp140','kpf107'),
 *           CAMPUS_NAME => array('Berks'),
 *         );
 */
function _digitalmeasures_arguments_string_to_array($arguments_string) {
  $arguments_array = array();
  $arguments = explode(',', $arguments_string);

  // Convert the list of arguments into a nested array of index keys and entry keys.
  foreach ($arguments as $argument) {
    $argument_array = explode(':', $argument);
    $index_key = $argument_array[0];
    $entry_key = $argument_array[1];

    $arguments_array[$index_key][] = $entry_key;
  }

  return $arguments_array;

}
